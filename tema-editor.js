// tema-editor.js - –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ù–¢–ö"
// –í–µ—Ä—Å–∏—è: 1.0

window.TemaEditor = {
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    build: function() {
        if (!currentData || !currentPageConf) {
            console.error('TemaEditor: –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        let html = `
            <h3 class="section-title">üéØ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –ù–¢–ö</h3>
            <p style="background: #d4edda; padding: 10px; border-radius: 5px; color: #155724; margin-bottom: 20px;">
                <strong>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ tema-data.js</strong>
            </p>
            
            <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
            <div class="section-container">
                <h4>‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h4>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</label>
                    <input type="text" id="tema-page-title" value="${currentData.pageSettings?.title || ''}" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã">
                </div>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ Hero-—Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="tema-hero-title" value="${currentData.pageSettings?.heroTitle || ''}" placeholder="–ù–ê–£–ß–ù–´–ô –ù–ê–í–ò–ì–ê–¢–û–†">
                </div>
                
                <div class="form-group">
                    <label>–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:</label>
                    <input type="text" id="tema-main-section-title" value="${currentData.pageSettings?.mainSectionTitle || ''}" placeholder="–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ù–¢–ö">
                </div>
            </div>

            <!-- –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã -->
            <div class="section-container">
                <h4>üìã –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã (6 —à–∞–≥–æ–≤)</h4>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="tema-algorithm-title" value="${currentData.algorithm?.sectionTitle || ''}" placeholder="–ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –ù–¢–ö">
                </div>
                
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <textarea id="tema-algorithm-subtitle" placeholder="–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ">${currentData.algorithm?.sectionSubtitle || ''}</textarea>
                </div>
                
                <div id="tema-algorithm-steps-container">
                    ${this.generateStepsEditor(currentData.algorithm?.steps || [])}
                </div>
                
                <button class="add-btn" onclick="TemaEditor.addStep()">+ –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥</button>
            </div>

            <!-- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ -->
            <div class="section-container">
                <h4>üöÄ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (7 —Ñ–∞–∑)</h4>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="tema-implementation-title" value="${currentData.implementation?.sectionTitle || ''}" placeholder="–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞">
                </div>
                
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <textarea id="tema-implementation-subtitle" placeholder="–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏">${currentData.implementation?.sectionSubtitle || ''}</textarea>
                </div>
                
                <div id="tema-implementation-phases-container">
                    ${this.generatePhasesEditor(currentData.implementation?.phases || [])}
                </div>
                
                <button class="add-btn" onclick="TemaEditor.addPhase()">+ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∑—É</button>
            </div>

            <!-- –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ -->
            <div class="section-container">
                <h4>üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤</h4>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                        <input type="text" id="tema-criteria-title" value="${currentData.evaluationCriteria?.sectionTitle || ''}" placeholder="–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ù–¢–ö">
                    </div>
                    <div class="form-group">
                        <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</label>
                        <input type="number" id="tema-criteria-max-score" value="${currentData.evaluationCriteria?.maxTotalScore || 21}" min="1" max="50">
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <textarea id="tema-criteria-subtitle" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏">${currentData.evaluationCriteria?.sectionSubtitle || ''}</textarea>
                </div>
                
                <div id="tema-criteria-container">
                    ${this.generateCriteriaEditor(currentData.evaluationCriteria?.criteria || [])}
                </div>
                
                <button class="add-btn" onclick="TemaEditor.addCriterion()">+ –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π</button>
            </div>

            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div class="section-container">
                <h4>üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="tema-additional-title" value="${currentData.additionalInfo?.sectionTitle || ''}" placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                </div>
                
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <textarea id="tema-additional-subtitle" placeholder="–í–∞–∂–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏">${currentData.additionalInfo?.sectionSubtitle || ''}</textarea>
                </div>
                
                <div id="tema-additional-tips-container">
                    ${this.generateTipsEditor(currentData.additionalInfo?.tips || [])}
                </div>
                
                <button class="add-btn" onclick="TemaEditor.addTip()">+ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç</button>
            </div>

            <!-- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é -->
            <div class="section-container">
                <h4>üéØ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é</h4>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ CTA:</label>
                    <input type="text" id="tema-cta-title" value="${currentData.callToAction?.title || ''}" placeholder="–ì–æ—Ç–æ–≤—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –ù–¢–ö?">
                </div>
                
                <div class="form-group">
                    <label>–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</label>
                    <textarea id="tema-cta-highlight" placeholder="–í–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º">${currentData.callToAction?.highlightText || ''}</textarea>
                </div>
                
                <h5>–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π:</h5>
                <div id="tema-cta-buttons-container">
                    ${this.generateCTAButtonsEditor(currentData.callToAction?.buttons || [])}
                </div>
                <button class="add-btn" onclick="TemaEditor.addCTAButton()">+ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É</button>
            </div>

            <div class="btn-group" style="margin-top: 40px;">
                <button class="btn btn-preview" onclick="TemaEditor.preview()">üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button class="btn btn-save" onclick="TemaEditor.save()">üíæ –°–∫–∞—á–∞—Ç—å tema-data.js</button>
            </div>
        `;

        contentEdit.innerHTML = html;
    },

    generateStepsEditor: function(steps) {
        if (!steps || steps.length === 0) {
            return '<p class="empty-state">–®–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>';
        }
        
        return steps.map((step, index) => `
            <div class="step-editor-card" id="step-${index}">
                <div class="card-header">
                    <h4>–®–∞–≥ ${index + 1}: ${step.title || '–ù–æ–≤—ã–π —à–∞–≥'}</h4>
                    <button class="remove-card-btn" onclick="TemaEditor.removeStep(${index})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–ù–æ–º–µ—Ä —à–∞–≥–∞:</label>
                        <input type="text" id="step-number-${index}" value="${step.number || ''}" placeholder="–®–ê–ì 1">
                    </div>
                    <div class="form-group">
                        <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):</label>
                        <input type="text" id="step-icon-${index}" value="${step.icon || ''}" placeholder="üîç">
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞:</label>
                    <input type="text" id="step-title-${index}" value="${step.title || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞">
                </div>
                
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞:</label>
                    <textarea id="step-description-${index}" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ">${step.description || ''}</textarea>
                </div>
                
                <div class="form-group">
                    <label>–ü—É–Ω–∫—Ç—ã —à–∞–≥–∞:</label>
                    <div id="step-items-${index}" class="step-items-editor">
                        ${this.generateStepItemsEditor(step.items || [], index)}
                    </div>
                    <button type="button" class="add-item-btn" onclick="TemaEditor.addStepItem(${index})">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç</button>
                </div>
            </div>
        `).join('');
    },

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
    generateStepItemsEditor: function(items, stepIndex) {
        return items.map((item, itemIndex) => `
            <div class="step-item-editor" id="step-${stepIndex}-item-${itemIndex}">
                <div class="step-item-header">
                    <label>–¢–∏–ø –ø—É–Ω–∫—Ç–∞:</label>
                    <select id="step-${stepIndex}-item-${itemIndex}-type" onchange="TemaEditor.toggleItemType(${stepIndex}, ${itemIndex})">
                        <option value="text" ${item.type === 'text' ? 'selected' : ''}>–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç</option>
                        <option value="link" ${item.type === 'link' ? 'selected' : ''}>–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞</option>
                    </select>
                    <button type="button" class="remove-item-btn" onclick="TemaEditor.removeStepItem(${stepIndex}, ${itemIndex})">‚ùå</button>
                </div>
                
                <div class="form-group">
                    <label>–¢–µ–∫—Å—Ç –ø—É–Ω–∫—Ç–∞:</label>
                    <input type="text" id="step-${stepIndex}-item-${itemIndex}-content" value="${item.content || ''}" placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞">
                </div>
                
                <div class="link-fields" id="step-${stepIndex}-item-${itemIndex}-link-fields" style="display: ${item.type === 'link' ? 'block' : 'none'};">
                    <div class="form-row">
                        <div class="form-group">
                            <label>URL —Å—Å—ã–ª–∫–∏:</label>
                            <input type="text" id="step-${stepIndex}-item-${itemIndex}-url" value="${item.url || ''}" placeholder="baza.html">
                        </div>
                        <div class="form-group">
                            <label>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:</label>
                            <input type="text" id="step-${stepIndex}-item-${itemIndex}-description" value="${item.description || ''}" placeholder="—Å—Ç—Ä–∞–Ω–∏—á–∫–∞ —Å –±–∞–∑–æ–π">
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
    },

    // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    toggleItemType: function(stepIndex, itemIndex) {
        const typeSelect = document.getElementById(`step-${stepIndex}-item-${itemIndex}-type`);
        const linkFields = document.getElementById(`step-${stepIndex}-item-${itemIndex}-link-fields`);
        
        if (typeSelect.value === 'link') {
            linkFields.style.display = 'block';
        } else {
            linkFields.style.display = 'none';
        }
    },

    addStepItem: function(stepIndex) {
        const container = document.getElementById(`step-items-${stepIndex}`);
        const itemIndex = container.children.length;
        
        const newItemHTML = this.generateStepItemsEditor([{
            type: 'text',
            content: '',
            url: '',
            description: ''
        }], stepIndex).replace(/item-0/g, `item-${itemIndex}`);
        
        container.insertAdjacentHTML('beforeend', newItemHTML);
    },

    removeStepItem: function(stepIndex, itemIndex) {
        const itemElement = document.getElementById(`step-${stepIndex}-item-${itemIndex}`);
        if (itemElement) {
            itemElement.remove();
        }
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ñ–∞–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    generatePhasesEditor: function(phases) {
        if (!phases || phases.length === 0) {
            return '<p class="empty-state">–§–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>';
        }
        
        return phases.map((phase, index) => `
            <div class="phase-editor-card" id="phase-${index}">
                <div class="card-header">
                    <h4>–§–∞–∑–∞ ${index + 1}: ${phase.title || '–ù–æ–≤–∞—è —Ñ–∞–∑–∞'}</h4>
                    <button class="remove-card-btn" onclick="TemaEditor.removePhase(${index})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):</label>
                        <input type="text" id="phase-icon-${index}" value="${phase.icon || ''}" placeholder="üéØ">
                    </div>
                    <div class="form-group">
                        <label>–¶–≤–µ—Ç —Ñ–∞–∑—ã:</label>
                        <input type="color" id="phase-color-${index}" value="${phase.color || '#0e4094'}">
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–∑—ã:</label>
                    <input type="text" id="phase-title-${index}" value="${phase.title || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã">
                </div>
                
                <div class="form-group">
                    <label>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="phase-description-${index}" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ">${phase.description || ''}</textarea>
                </div>
                
                <div class="form-group">
                    <label>–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="phase-details-${index}" rows="3" placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∑—ã">${phase.details || ''}</textarea>
                </div>
            </div>
        `).join('');
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    generateCriteriaEditor: function(criteria) {
        if (!criteria || criteria.length === 0) {
            return '<p class="empty-state">–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>';
        }
        
        return criteria.map((criterion, index) => `
            <div class="criterion-editor-card" id="criterion-${index}">
                <div class="card-header">
                    <h4>–ö—Ä–∏—Ç–µ—Ä–∏–π ${index + 1}: ${criterion.name || '–ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π'}</h4>
                    <button class="remove-card-btn" onclick="TemaEditor.removeCriterion(${index})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è:</label>
                        <input type="text" id="criterion-name-${index}" value="${criterion.name || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è">
                    </div>
                    <div class="form-group">
                        <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</label>
                        <input type="number" id="criterion-max-score-${index}" value="${criterion.maxScore || 3}" min="1" max="10">
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ —à–∫–∞–ª—ã:</label>
                    <textarea id="criterion-scale-desc-${index}" placeholder="–ß—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π">${criterion.scaleDescription || ''}</textarea>
                </div>
                
                <h5>–£—Ä–æ–≤–Ω–∏ –æ—Ü–µ–Ω–∫–∏:</h5>
                <div id="criterion-levels-${index}">
                    ${this.generateLevelsEditor(criterion.levels || [], index)}
                </div>
                <button type="button" class="add-btn" onclick="TemaEditor.addLevel(${index})">+ –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å</button>
            </div>
        `).join('');
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π –∫—Ä–∏—Ç–µ—Ä–∏—è
    generateLevelsEditor: function(levels, criterionIndex) {
        return levels.map((level, levelIndex) => `
            <div class="level-editor" id="level-${criterionIndex}-${levelIndex}">
                <div class="level-header">
                    <span>–£—Ä–æ–≤–µ–Ω—å ${levelIndex + 1} (${level.score || 0} –±–∞–ª–ª–æ–≤)</span>
                    <button class="remove-card-btn" onclick="TemaEditor.removeLevel(${criterionIndex}, ${levelIndex})">√ó</button>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–ë–∞–ª–ª:</label>
                        <input type="number" id="level-score-${criterionIndex}-${levelIndex}" value="${level.score || 0}" min="0" max="10">
                    </div>
                    <div class="form-group">
                        <label>–¶–≤–µ—Ç:</label>
                        <input type="color" id="level-color-${criterionIndex}-${levelIndex}" value="${level.color || '#dc3545'}">
                    </div>
                </div>
                <div class="form-group">
                    <label>–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</label>
                    <input type="text" id="level-label-${criterionIndex}-${levelIndex}" value="${level.label || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è">
                </div>
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="level-description-${criterionIndex}-${levelIndex}" placeholder="–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è">${level.description || ''}</textarea>
                </div>
            </div>
        `).join('');
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ–≤–µ—Ç–æ–≤
    generateTipsEditor: function(tips) {
        if (!tips || tips.length === 0) {
            return '<p class="empty-state">–°–æ–≤–µ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>';
        }
        
        return tips.map((tip, index) => `
            <div class="tip-editor-card" id="tip-${index}">
                <div class="card-header">
                    <h4>–°–æ–≤–µ—Ç ${index + 1}: ${tip.title || '–ù–æ–≤—ã–π —Å–æ–≤–µ—Ç'}</h4>
                    <button class="remove-card-btn" onclick="TemaEditor.removeTip(${index})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):</label>
                        <input type="text" id="tip-icon-${index}" value="${tip.icon || ''}" placeholder="üí°">
                    </div>
                    <div class="form-group">
                        <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≤–µ—Ç–∞:</label>
                        <input type="text" id="tip-title-${index}" value="${tip.title || ''}" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≤–µ—Ç–∞">
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ü—É–Ω–∫—Ç—ã —Å–æ–≤–µ—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):</label>
                    <textarea id="tip-items-${index}" rows="4" placeholder="–ü—É–Ω–∫—Ç 1\n–ü—É–Ω–∫—Ç 2\n–ü—É–Ω–∫—Ç 3">${(tip.items || []).join('\n')}</textarea>
                </div>
            </div>
        `).join('');
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫ CTA
    generateCTAButtonsEditor: function(buttons) {
        if (!buttons || buttons.length === 0) {
            return '<p class="empty-state">–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>';
        }
        
        return buttons.map((button, index) => `
            <div class="cta-button-editor-card" id="cta-button-${index}">
                <div class="card-header">
                    <h4>–ö–Ω–æ–ø–∫–∞ ${index + 1}</h4>
                    <button class="remove-card-btn" onclick="TemaEditor.removeCTAButton(${index})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                <div class="form-group">
                    <label>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</label>
                    <input type="text" id="cta-button-text-${index}" value="${button.text || ''}" placeholder="üöÄ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏">
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–°—Å—ã–ª–∫–∞:</label>
                        <input type="text" id="cta-button-url-${index}" value="${button.url || ''}" placeholder="baza.html">
                    </div>
                    <div class="form-group">
                        <label>–¢–∏–ø –∫–Ω–æ–ø–∫–∏:</label>
                        <select id="cta-button-type-${index}">
                            <option value="primary" ${button.type === 'primary' ? 'selected' : ''}>–û—Å–Ω–æ–≤–Ω–∞—è</option>
                            <option value="secondary" ${button.type === 'secondary' ? 'selected' : ''}>–í—Ç–æ—Ä–∏—á–Ω–∞—è</option>
                            <option value="success" ${button.type === 'success' ? 'selected' : ''}>–£—Å–ø–µ—Ö</option>
                        </select>
                    </div>
                </div>
            </div>
        `).join('');
    },

    // –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í
    addStep: function() {
        const newStep = {
            id: "step" + Date.now(),
            number: "–®–ê–ì " + (currentData.algorithm.steps.length + 1),
            title: "–ù–æ–≤—ã–π —à–∞–≥",
            description: "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞",
            items: ["–ù–æ–≤—ã–π –ø—É–Ω–∫—Ç —à–∞–≥–∞"],
            icon: "üéØ"
        };
        
        if (!currentData.algorithm.steps) currentData.algorithm.steps = [];
        currentData.algorithm.steps.push(newStep);
        
        const container = document.getElementById('tema-algorithm-steps-container');
        container.innerHTML = this.generateStepsEditor(currentData.algorithm.steps);
    },

    addPhase: function() {
        const newPhase = {
            id: "phase" + Date.now(),
            title: "–ù–æ–≤–∞—è —Ñ–∞–∑–∞",
            description: "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∞–∑—ã",
            details: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∞–∑—ã",
            icon: "üöÄ",
            color: "#0e4094"
        };
        
        if (!currentData.implementation.phases) currentData.implementation.phases = [];
        currentData.implementation.phases.push(newPhase);
        
        const container = document.getElementById('tema-implementation-phases-container');
        container.innerHTML = this.generatePhasesEditor(currentData.implementation.phases);
    },

    addCriterion: function() {
        const newCriterion = {
            id: "criterion" + Date.now(),
            name: "–ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π",
            maxScore: 3,
            scaleDescription: "–û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –æ—Ü–µ–Ω–∫–∏",
            levels: [
                { score: 0, label: "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", description: "–ö—Ä–∏—Ç–µ—Ä–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω", color: "#dc3545" },
                { score: 1, label: "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", description: "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", color: "#ffc107" },
                { score: 2, label: "–•–æ—Ä–æ—à–æ", description: "–•–æ—Ä–æ—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", color: "#28a745" },
                { score: 3, label: "–û—Ç–ª–∏—á–Ω–æ", description: "–û—Ç–ª–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", color: "#0e4094" }
            ]
        };
        
        if (!currentData.evaluationCriteria.criteria) currentData.evaluationCriteria.criteria = [];
        currentData.evaluationCriteria.criteria.push(newCriterion);
        
        const container = document.getElementById('tema-criteria-container');
        container.innerHTML = this.generateCriteriaEditor(currentData.evaluationCriteria.criteria);
    },

    addLevel: function(criterionIndex) {
        const newLevel = {
            score: 0,
            label: "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
            description: "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
            color: "#6c757d"
        };
        
        if (!currentData.evaluationCriteria.criteria[criterionIndex].levels) {
            currentData.evaluationCriteria.criteria[criterionIndex].levels = [];
        }
        currentData.evaluationCriteria.criteria[criterionIndex].levels.push(newLevel);
        
        const container = document.getElementById(`criterion-levels-${criterionIndex}`);
        container.innerHTML = this.generateLevelsEditor(
            currentData.evaluationCriteria.criteria[criterionIndex].levels,
            criterionIndex
        );
    },

    addTip: function() {
        const newTip = {
            id: "tip" + Date.now(),
            title: "–ù–æ–≤—ã–π —Å–æ–≤–µ—Ç",
            items: ["–ù–æ–≤—ã–π –ø—É–Ω–∫—Ç —Å–æ–≤–µ—Ç–∞"],
            icon: "üí°"
        };
        
        if (!currentData.additionalInfo.tips) currentData.additionalInfo.tips = [];
        currentData.additionalInfo.tips.push(newTip);
        
        const container = document.getElementById('tema-additional-tips-container');
        container.innerHTML = this.generateTipsEditor(currentData.additionalInfo.tips);
    },

    addCTAButton: function() {
        const newButton = {
            text: "üîó –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞",
            url: "#",
            type: "primary"
        };
        
        if (!currentData.callToAction.buttons) currentData.callToAction.buttons = [];
        currentData.callToAction.buttons.push(newButton);
        
        const container = document.getElementById('tema-cta-buttons-container');
        container.innerHTML = this.generateCTAButtonsEditor(currentData.callToAction.buttons);
    },

    // –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í
    removeStep: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞?')) {
            currentData.algorithm.steps.splice(index, 1);
            const container = document.getElementById('tema-algorithm-steps-container');
            container.innerHTML = this.generateStepsEditor(currentData.algorithm.steps);
        }
    },

    removePhase: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–∞–∑—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?')) {
            currentData.implementation.phases.splice(index, 1);
            const container = document.getElementById('tema-implementation-phases-container');
            container.innerHTML = this.generatePhasesEditor(currentData.implementation.phases);
        }
    },

    removeCriterion: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Ü–µ–Ω–∫–∏?')) {
            currentData.evaluationCriteria.criteria.splice(index, 1);
            const container = document.getElementById('tema-criteria-container');
            container.innerHTML = this.generateCriteriaEditor(currentData.evaluationCriteria.criteria);
        }
    },

    removeLevel: function(criterionIndex, levelIndex) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å?')) {
            currentData.evaluationCriteria.criteria[criterionIndex].levels.splice(levelIndex, 1);
            const container = document.getElementById(`criterion-levels-${criterionIndex}`);
            container.innerHTML = this.generateLevelsEditor(
                currentData.evaluationCriteria.criteria[criterionIndex].levels,
                criterionIndex
            );
        }
    },

    removeTip: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç?')) {
            currentData.additionalInfo.tips.splice(index, 1);
            const container = document.getElementById('tema-additional-tips-container');
            container.innerHTML = this.generateTipsEditor(currentData.additionalInfo.tips);
        }
    },

    removeCTAButton: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É?')) {
            currentData.callToAction.buttons.splice(index, 1);
            const container = document.getElementById('tema-cta-buttons-container');
            container.innerHTML = this.generateCTAButtonsEditor(currentData.callToAction.buttons);
        }
    },

    // –°–ë–û–† –î–ê–ù–ù–´–• –ò–ó –§–û–†–ú–´
    gatherData: function() {
        return {
            pageSettings: {
                title: val('tema-page-title') || "–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ù–¢–ö",
                heroTitle: val('tema-hero-title') || "–ù–ê–£–ß–ù–´–ô –ù–ê–í–ò–ì–ê–¢–û–†",
                mainSectionTitle: val('tema-main-section-title') || "–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ù–¢–ö",
                lastUpdated: new Date().toISOString()
            },
            algorithm: {
                sectionTitle: val('tema-algorithm-title') || "–ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –ù–¢–ö",
                sectionSubtitle: val('tema-algorithm-subtitle') || "",
                steps: this.gatherStepsData()
            },
            implementation: {
                sectionTitle: val('tema-implementation-title') || "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
                sectionSubtitle: val('tema-implementation-subtitle') || "",
                phases: this.gatherPhasesData()
            },
            evaluationCriteria: {
                sectionTitle: val('tema-criteria-title') || "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ù–¢–ö",
                sectionSubtitle: val('tema-criteria-subtitle') || "",
                maxTotalScore: parseInt(val('tema-criteria-max-score')) || 21,
                criteria: this.gatherCriteriaData()
            },
            additionalInfo: {
                sectionTitle: val('tema-additional-title') || "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                sectionSubtitle: val('tema-additional-subtitle') || "",
                tips: this.gatherTipsData()
            },
            callToAction: {
                title: val('tema-cta-title') || "–ì–æ—Ç–æ–≤—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –ù–¢–ö?",
                highlightText: val('tema-cta-highlight') || "",
                buttons: this.gatherCTAButtonsData()
            }
        };
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    gatherStepsData: function() {
        const steps = [];
        const containers = document.querySelectorAll('.step-editor-card');
        
        containers.forEach((container, index) => {
            const number = val(`step-number-${index}`);
            const title = val(`step-title-${index}`);
            const description = val(`step-description-${index}`);
            const icon = val(`step-icon-${index}`);
            
            // –°–æ–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Å—ã–ª–æ–∫
            const items = [];
            const itemsContainer = container.querySelector(`#step-items-${index}`);
            if (itemsContainer) {
                Array.from(itemsContainer.children).forEach((itemEl, itemIndex) => {
                    const type = val(`step-${index}-item-${itemIndex}-type`) || 'text';
                    const content = val(`step-${index}-item-${itemIndex}-content`);
                    
                    if (content.trim()) {
                        const item = {
                            type: type,
                            content: content
                        };
                        
                        if (type === 'link') {
                            item.url = val(`step-${index}-item-${itemIndex}-url`) || '#';
                            item.description = val(`step-${index}-item-${itemIndex}-description`) || '';
                        }
                        
                        items.push(item);
                    }
                });
            }
            
            if (title.trim()) {
                steps.push({
                    id: "step" + (index + 1),
                    number,
                    title,
                    description,
                    items,
                    icon
                });
            }
        });
        
        return steps;
    },

    gatherPhasesData: function() {
        const phases = [];
        const containers = document.querySelectorAll('.phase-editor-card');
        
        containers.forEach((container, index) => {
            const title = val(`phase-title-${index}`);
            const description = val(`phase-description-${index}`);
            const details = val(`phase-details-${index}`);
            const icon = val(`phase-icon-${index}`);
            const color = val(`phase-color-${index}`);
            
            if (title.trim()) {
                phases.push({
                    id: "phase" + (index + 1),
                    title,
                    description,
                    details,
                    icon,
                    color
                });
            }
        });
        
        return phases;
    },

    gatherCriteriaData: function() {
        const criteria = [];
        const containers = document.querySelectorAll('.criterion-editor-card');
        
        containers.forEach((container, index) => {
            const name = val(`criterion-name-${index}`);
            const maxScore = parseInt(val(`criterion-max-score-${index}`)) || 3;
            const scaleDescription = val(`criterion-scale-desc-${index}`);
            
            if (name.trim()) {
                const levels = this.gatherLevelsData(index);
                criteria.push({
                    id: "criterion" + (index + 1),
                    name,
                    maxScore,
                    scaleDescription,
                    levels
                });
            }
        });
        
        return criteria;
    },

    gatherLevelsData: function(criterionIndex) {
        const levels = [];
        const levelContainers = document.querySelectorAll(`#criterion-levels-${criterionIndex} .level-editor`);
        
        levelContainers.forEach((container, levelIndex) => {
            const score = parseInt(val(`level-score-${criterionIndex}-${levelIndex}`)) || 0;
            const label = val(`level-label-${criterionIndex}-${levelIndex}`);
            const description = val(`level-description-${criterionIndex}-${levelIndex}`);
            const color = val(`level-color-${criterionIndex}-${levelIndex}`);
            
            if (label.trim() && description.trim()) {
                levels.push({
                    score,
                    label,
                    description,
                    color
                });
            }
        });
        
        return levels;
    },

    gatherTipsData: function() {
        const tips = [];
        const containers = document.querySelectorAll('.tip-editor-card');
        
        containers.forEach((container, index) => {
            const title = val(`tip-title-${index}`);
            const icon = val(`tip-icon-${index}`);
            const itemsText = val(`tip-items-${index}`);
            const items = itemsText ? itemsText.split('\n').filter(item => item.trim()) : [];
            
            if (title.trim()) {
                tips.push({
                    id: "tip" + (index + 1),
                    title,
                    items,
                    icon
                });
            }
        });
        
        return tips;
    },

    gatherCTAButtonsData: function() {
        const buttons = [];
        const containers = document.querySelectorAll('.cta-button-editor-card');
        
        containers.forEach((container, index) => {
            const text = val(`cta-button-text-${index}`);
            const url = val(`cta-button-url-${index}`);
            const type = val(`cta-button-type-${index}`);
            
            if (text.trim() && url.trim()) {
                buttons.push({
                    text,
                    url,
                    type
                });
            }
        });
        
        return buttons;
    },

    // –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
    save: function() {
        const updatedData = this.gatherData();
        downloadJS('tema-data.js', 'window.temaData', updatedData);
    },

    // –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†
    preview: function() {
        const data = this.gatherData();
        
        let html = `
            <html>
            <head>
                <title>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: ${data.pageSettings.title}</title>
                <style>
                    body {font: 14px Arial; padding: 20px; background: #f5f5f5; line-height: 1.6;}
                    h1 {color: #0e4094; text-align: center; margin-bottom: 30px;}
                    h2 {color: #0e4094; margin-top: 40px; padding-bottom: 10px; border-bottom: 2px solid #0e4094;}
                    .section-desc {font-style: italic; color: #666; margin-bottom: 20px;}
                    .step, .phase, .tip {background: white; margin: 20px 0; padding: 25px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-left: 4px solid #0e4094;}
                    .criterion {background: white; margin: 15px 0; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);}
                    .levels {display: flex; gap: 10px; margin-top: 15px; flex-wrap: wrap;}
                    .level {padding: 10px 15px; border-radius: 8px; color: white; text-align: center; min-width: 100px;}
                    .step h3, .phase h3, .tip h3 {color: #0e4094; margin-bottom: 15px; display: flex; align-items: center; gap: 10px;}
                    .items {margin-top: 15px;}
                    .items li {margin: 8px 0; padding-left: 10px;}
                    .cta-buttons {display: flex; gap: 15px; justify-content: center; margin-top: 30px; flex-wrap: wrap;}
                    .cta-btn {padding: 12px 24px; border-radius: 8px; text-decoration: none; font-weight: bold;}
                    .cta-btn.primary {background: #0e4094; color: white;}
                    .cta-btn.secondary {background: #6c757d; color: white;}
                    .cta-btn.success {background: #28a745; color: white;}
                    .highlight {background: #fff3cd; border-left: 4px solid #ffc107; padding: 20px; margin: 20px 0; border-radius: 5px;}
                </style>
            </head>
            <body>
                <h1>${data.pageSettings.title}</h1>
                
                <h2>${data.algorithm.sectionTitle}</h2>
                <div class="section-desc">${data.algorithm.sectionSubtitle}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        data.algorithm.steps.forEach(step => {
            html += `
                <div class="step">
                    <h3>${step.icon} ${step.number}: ${step.title}</h3>
                    <p>${step.description}</p>
                    <div class="items">
                        <ul>
                            ${step.items.map(item => `<li>${item}</li>`).join('')}
                        </ul>
                    </div>
                </div>
            `;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        html += `<h2>${data.implementation.sectionTitle}</h2><div class="section-desc">${data.implementation.sectionSubtitle}</div>`;
        
        data.implementation.phases.forEach(phase => {
            html += `
                <div class="phase" style="border-left-color: ${phase.color};">
                    <h3>${phase.icon} ${phase.title}</h3>
                    <p><strong>${phase.description}</strong></p>
                    <p>${phase.details}</p>
                </div>
            `;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏
        html += `
            <h2>${data.evaluationCriteria.sectionTitle}</h2>
            <div class="section-desc">${data.evaluationCriteria.sectionSubtitle}</div>
            <div style="text-align: center; background: #0e4094; color: white; padding: 20px; border-radius: 10px; margin: 20px 0;">
                <h3>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: ${data.evaluationCriteria.maxTotalScore}</h3>
            </div>
        `;
        
        data.evaluationCriteria.criteria.forEach(criterion => {
            html += `
                <div class="criterion">
                    <h3>${criterion.name}</h3>
                    <p><em>${criterion.scaleDescription}</em> (–º–∞–∫—Å–∏–º—É–º: ${criterion.maxScore} –±–∞–ª–ª–æ–≤)</p>
                    <div class="levels">
                        ${criterion.levels.map(level => `
                            <div class="level" style="background: ${level.color};">
                                <div><strong>${level.score}</strong></div>
                                <div>${level.label}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        html += `<h2>${data.additionalInfo.sectionTitle}</h2><div class="section-desc">${data.additionalInfo.sectionSubtitle}</div>`;
        
        data.additionalInfo.tips.forEach(tip => {
            html += `
                <div class="tip">
                    <h3>${tip.icon} ${tip.title}</h3>
                    <div class="items">
                        <ul>
                            ${tip.items.map(item => `<li>${item}</li>`).join('')}
                        </ul>
                    </div>
                </div>
            `;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        html += `
            <h2>${data.callToAction.title}</h2>
            <div class="highlight">${data.callToAction.highlightText}</div>
            <div class="cta-buttons">
                ${data.callToAction.buttons.map(button => 
                    `<a href="${button.url}" class="cta-btn ${button.type}">${button.text}</a>`
                ).join('')}
            </div>
        `;
        
        html += `
                <div style="margin-top: 40px; text-align: center; color: #666; font-size: 0.9em;">
                    <p>–í—Å–µ–≥–æ —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: ${data.algorithm.steps.length}</p>
                    <p>–í—Å–µ–≥–æ —Ñ–∞–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: ${data.implementation.phases.length}</p>
                    <p>–í—Å–µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏: ${data.evaluationCriteria.criteria.length}</p>
                    <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}</p>
                </div>
            </body>
            </html>
        `;
        
        openPreview(html);
    }
};

console.log('‚úÖ TemaEditor –∑–∞–≥—Ä—É–∂–µ–Ω');
