// content-editor.js - –†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è baza.html
// –í–µ—Ä—Å–∏—è: 1.0

window.ContentEditor = {
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    build: function() {
        if (!currentData || !currentPageConf) {
            console.error('ContentEditor: –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
        const tabs = Object.keys(currentData).map((k, i) => 
            `<button class="section-tab${i ? '' : ' active'}" onclick="ContentEditor.showSection('${k}', this)">${currentData[k].title || k}</button>`
        ).join('');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        let sectionBlocks = '';
        Object.keys(currentData).forEach((sectionKey, index) => {
            const section = currentData[sectionKey];
            sectionBlocks += `
                <div id="content-section-${sectionKey}" class="content-section-editor${index ? '' : ' active'}">
                    <div class="section-container">
                        <h4>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ "${sectionKey}"</h4>
                        
                        <div class="form-group">
                            <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:</label>
                            <input type="text" id="section-title-${sectionKey}" value="${section.title || ''}" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞">
                        </div>
                        
                        <div class="form-group">
                            <label>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:</label>
                            <textarea id="section-desc-${sectionKey}" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞">${section.description || ''}</textarea>
                        </div>
                        
                        <h5>–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (${section.cards?.length || 0} —à—Ç.):</h5>
                        <div id="cards-container-${sectionKey}">
                            ${this.generateCards(section.cards || [], sectionKey)}
                        </div>
                        
                        <button class="add-btn" onclick="ContentEditor.addCard('${sectionKey}')">+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
                    </div>
                </div>
            `;
        });

        let html = `
            <h3 class="section-title">üóÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ù–¢–ö</h3>
            <p style="background: #d4edda; padding: 10px; border-radius: 5px; color: #155724; margin-bottom: 20px;">
                <strong>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ content-data.js</strong>
            </p>
            
            <!-- –í–∫–ª–∞–¥–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ -->
            <div class="content-sections-tabs">
                ${tabs}
            </div>
            
            <!-- –ë–ª–æ–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ -->
            ${sectionBlocks}
            
            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏ -->
            <div class="section-container">
                <h4>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏</h4>
                <button class="add-btn" onclick="ContentEditor.addSection()">+ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª</button>
            </div>
            
            <div class="btn-group" style="margin-top: 40px;">
                <button class="btn btn-preview" onclick="ContentEditor.preview()">üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button class="btn btn-save" onclick="ContentEditor.save()">üíæ –°–∫–∞—á–∞—Ç—å content-data.js</button>
            </div>
        `;

        contentEdit.innerHTML = html;
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    generateCards: function(cards, sectionKey) {
        if (!cards || cards.length === 0) {
            return '<p class="empty-state">–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>';
        }

        return cards.map((card, index) => `
            <div class="modal-card-editor" id="card-${sectionKey}-${index}">
                <div class="card-header">
                    <h4>–ö–∞—Ä—Ç–æ—á–∫–∞ ${index + 1}: ${card.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                    <button class="remove-card-btn" onclick="ContentEditor.removeCard('${sectionKey}', ${index})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏:</label>
                    <input type="text" id="card-title-${sectionKey}-${index}" value="${card.title || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
                </div>
                
                <div class="form-group">
                    <label>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏:</label>
                    <textarea id="card-text-${sectionKey}-${index}" rows="6" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'li ' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤">${card.text || ''}</textarea>
                    <small style="color: #666; font-size: 0.85em;">
                        üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–∞—á–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å "li " –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ —Å–ø–∏—Å–∫–∞
                    </small>
                </div>
                
                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                <details style="margin-top: 15px;">
                    <summary style="cursor: pointer; color: var(--primary-color); font-weight: 600;">‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</summary>
                    <div style="padding: 15px 0;">
                        <div class="form-group">
                            <label>–ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏):</label>
                            <input type="text" id="card-icon-${sectionKey}-${index}" value="${card.icon || ''}" placeholder="üî¨">
                        </div>
                        
                        <div class="form-group">
                            <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                            <input type="text" id="card-tags-${sectionKey}-${index}" value="${(card.tags || []).join(', ')}" placeholder="–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è">
                        </div>
                        
                        <div class="form-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10):</label>
                            <input type="number" min="1" max="10" id="card-priority-${sectionKey}-${index}" value="${card.priority || 5}">
                        </div>
                    </div>
                </details>
            </div>
        `).join('');
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    showSection: function(sectionKey, button) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–æ–≤
        document.querySelectorAll('.section-tab').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.content-section-editor').forEach(section => section.classList.remove('active'));
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ —Ä–∞–∑–¥–µ–ª
        button.classList.add('active');
        const sectionElement = document.getElementById(`content-section-${sectionKey}`);
        if (sectionElement) {
            sectionElement.classList.add('active');
        }
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    addCard: function(sectionKey) {
        if (!currentData[sectionKey].cards) {
            currentData[sectionKey].cards = [];
        }

        const newCard = {
            title: '–ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            text: 'li –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\nli –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\nli –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
            icon: 'üî¨',
            tags: ['–Ω–æ–≤–æ–µ'],
            priority: 5
        };

        currentData[sectionKey].cards.push(newCard);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const container = document.getElementById(`cards-container-${sectionKey}`);
        container.innerHTML = this.generateCards(currentData[sectionKey].cards, sectionKey);
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    removeCard: function(sectionKey, cardIndex) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?')) {
            currentData[sectionKey].cards.splice(cardIndex, 1);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            const container = document.getElementById(`cards-container-${sectionKey}`);
            container.innerHTML = this.generateCards(currentData[sectionKey].cards, sectionKey);
        }
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    addSection: function() {
        const sectionName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:', 'noviy_razdel');
        if (!sectionName || sectionName.trim() === '') return;

        const sectionKey = sectionName.toLowerCase().replace(/[^a-z0-9_]/g, '_');
        
        if (currentData[sectionKey]) {
            alert('–†–∞–∑–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        currentData[sectionKey] = {
            title: sectionName,
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞',
            cards: []
        };

        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.build();
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        setTimeout(() => {
            const newTab = document.querySelector(`[onclick*="${sectionKey}"]`);
            if (newTab) {
                newTab.click();
            }
        }, 100);
    },

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    gatherData: function() {
        const updatedData = {};

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º
        Object.keys(currentData).forEach(sectionKey => {
            updatedData[sectionKey] = {
                title: val(`section-title-${sectionKey}`) || currentData[sectionKey].title,
                description: val(`section-desc-${sectionKey}`) || currentData[sectionKey].description,
                cards: []
            };

            // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            const cardsContainer = document.getElementById(`cards-container-${sectionKey}`);
            if (cardsContainer) {
                const cardElements = cardsContainer.querySelectorAll('.modal-card-editor');
                cardElements.forEach((cardEl, cardIndex) => {
                    const title = val(`card-title-${sectionKey}-${cardIndex}`);
                    const text = val(`card-text-${sectionKey}-${cardIndex}`);
                    
                    if (title.trim() || text.trim()) {
                        const tagsInput = val(`card-tags-${sectionKey}-${cardIndex}`);
                        const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
                        
                        updatedData[sectionKey].cards.push({
                            title: title,
                            text: text,
                            icon: val(`card-icon-${sectionKey}-${cardIndex}`) || 'üî¨',
                            tags: tags,
                            priority: parseInt(val(`card-priority-${sectionKey}-${cardIndex}`)) || 5
                        });
                    }
                });
            }
        });

        return updatedData;
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save: function() {
        const updatedData = this.gatherData();
        downloadJS('content-data.js', 'window.modalContentData', updatedData);
    },

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview: function() {
        const data = this.gatherData();
        
        let html = `
            <html>
            <head>
                <title>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –ë–∞–∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ù–¢–ö</title>
                <style>
                    body {font: 14px Arial; padding: 20px; background: #f5f5f5;}
                    h1 {color: #0e4094; text-align: center; margin-bottom: 30px;}
                    h2 {color: #0e4094; margin-top: 40px; padding-bottom: 10px; border-bottom: 2px solid #0e4094;}
                    .section-desc {font-style: italic; color: #666; margin-bottom: 20px;}
                    .card {background: white; margin: 20px 0; padding: 25px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); border-left: 4px solid #0e4094;}
                    .card h3 {color: #0e4094; margin-bottom: 15px; display: flex; align-items: center; gap: 10px;}
                    .card-content {line-height: 1.6;}
                    .card-content li {margin: 8px 0; padding-left: 10px;}
                    .tags {margin-top: 15px; display: flex; gap: 8px; flex-wrap: wrap;}
                    .tag {background: #e3f2fd; color: #1976d2; padding: 4px 12px; border-radius: 15px; font-size: 0.85em;}
                    .priority {background: #fff3e0; color: #f57c00; padding: 2px 8px; border-radius: 10px; font-size: 0.8em; margin-left: auto;}
                </style>
            </head>
            <body>
                <h1>üóÇÔ∏è –ë–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–µ–º –ù–¢–ö</h1>
        `;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        Object.keys(data).forEach(sectionKey => {
            const section = data[sectionKey];
            html += `
                <h2>${section.title}</h2>
                <div class="section-desc">${section.description}</div>
            `;

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            const sortedCards = [...section.cards].sort((a, b) => (b.priority || 5) - (a.priority || 5));

            sortedCards.forEach(card => {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å li –≤ HTML —Å–ø–∏—Å–æ–∫
                let cardContent = card.text.replace(/li\s+/g, '<li>').replace(/\n/g, '<br>');
                if (cardContent.includes('<li>')) {
                    cardContent = '<ul>' + cardContent.replace(/<br><li>/g, '</li><li>') + '</li></ul>';
                }

                html += `
                    <div class="card">
                        <h3>
                            <span>${card.icon || 'üî¨'}</span>
                            <span>${card.title}</span>
                            <span class="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${card.priority || 5}</span>
                        </h3>
                        <div class="card-content">${cardContent}</div>
                        ${card.tags && card.tags.length > 0 ? `
                            <div class="tags">
                                ${card.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                            </div>
                        ` : ''}
                    </div>
                `;
            });
        });

        html += `
                <div style="margin-top: 40px; text-align: center; color: #666; font-size: 0.9em;">
                    <p>–í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${Object.keys(data).length}</p>
                    <p>–í—Å–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${Object.values(data).reduce((sum, section) => sum + section.cards.length, 0)}</p>
                    <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}</p>
                </div>
            </body>
            </html>
        `;

        openPreview(html);
    }
};

console.log('‚úÖ ContentEditor –∑–∞–≥—Ä—É–∂–µ–Ω');
