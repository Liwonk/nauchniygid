// obzor-editor.js - –†–µ–¥–∞–∫—Ç–æ—Ä –æ–±–∑–æ—Ä–æ–≤ –ù–¢–ö
// –í–µ—Ä—Å–∏—è: 1.2 - 19.09.2025 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è save)
window.ObzorEditor = {
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    build: function() {
        if (!currentData || !currentPageConf) {
            console.error("ObzorEditor: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
            return;
        }

        let html = `
            <h3 class="section-title">–†–µ–¥–∞–∫—Ç–æ—Ä –æ–±–∑–æ—Ä–æ–≤ –ù–¢–ö</h3>
            <p style="background: #d4edda; padding: 10px; border-radius: 5px; color: #155724; margin-bottom: 20px;">
                <strong>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ obzor-data.js</strong>
            </p>

            <!-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
            <div class="section-container">
                <h4>üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h4>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</label>
                    <input type="text" id="obzor-page-title" value="${currentData.pageSettings?.title || ''}" placeholder="–û–±–∑–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤">
                </div>
                <div class="form-group">
                    <label>Hero-–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="obzor-hero-title" value="${currentData.pageSettings?.heroTitle || ''}" placeholder="–ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã">
                </div>
                <div class="form-group">
                    <label>–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="obzor-main-title" value="${currentData.pageSettings?.mainSectionTitle || ''}" placeholder="–û–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π">
                </div>
            </div>

            <!-- –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ -->
            <div class="section-container">
                <h4>üè¢ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</h4>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="company-section-title" value="${currentData.companyIntro?.sectionTitle || ''}" placeholder="–û –∫–æ–º–ø–∞–Ω–∏–∏">
                </div>
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="company-section-subtitle" value="${currentData.companyIntro?.sectionSubtitle || ''}" placeholder="–í–µ–¥—É—â–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è">
                </div>
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="company-description" rows="4" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏...">${currentData.companyIntro?.description || ''}</textarea>
                </div>
            </div>

            <!-- –ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã–∑–æ–≤–æ–≤ -->
            <div class="section-container">
                <h4>üéØ –ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã–∑–æ–≤–æ–≤</h4>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="challenges-matrix-title" value="${currentData.challengesMatrix?.sectionTitle || ''}" placeholder="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã">
                </div>
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="challenges-matrix-subtitle" value="${currentData.challengesMatrix?.sectionSubtitle || ''}" placeholder="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π">
                </div>

                <!-- –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ -->
                <h5>üìÖ –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</h5>
                <div id="stages-container">`;

        if (currentData.challengesMatrix?.stages) {
            currentData.challengesMatrix.stages.forEach((stage, index) => {
                html += this.generateStageEditor(stage, index);
            });
        }

        html += `
                </div>
                <button type="button" class="add-card-btn" onclick="ObzorEditor.addStage()">‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø</button>

                <!-- –í—ã–∑–æ–≤—ã -->
                <h5>üéØ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã</h5>
                <div id="challenges-container">`;

        if (currentData.challengesMatrix?.challenges) {
            currentData.challengesMatrix.challenges.forEach((challenge, index) => {
                html += this.generateChallengeEditor(challenge, index);
            });
        }

        html += `
                </div>
                <button type="button" class="add-card-btn" onclick="ObzorEditor.addChallenge()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤</button>
            </div>

            <!-- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã -->
            <div class="section-container">
                <h4>‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã</h4>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="strategic-title" value="${currentData.strategicChallenges?.sectionTitle || ''}" placeholder="–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã">
                </div>
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="strategic-subtitle" value="${currentData.strategicChallenges?.sectionSubtitle || ''}" placeholder="–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è">
                </div>

                <h5>üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h5>
                <div id="strategic-challenges-container">`;

        if (currentData.strategicChallenges?.challenges) {
            currentData.strategicChallenges.challenges.forEach((challenge, index) => {
                html += this.generateStrategicChallengeEditor(challenge, index);
            });
        }

        html += `
                </div>
                <button type="button" class="add-card-btn" onclick="ObzorEditor.addStrategicChallenge()">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</button>
            </div>

            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π -->
            <div class="section-container">
                <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π</h4>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏:</label>
                    <input type="text" id="stats-title" value="${currentData.solutionStats?.sectionTitle || ''}" placeholder="–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤:</label>
                        <input type="text" id="stats-challenges" value="${currentData.solutionStats?.totalChallenges || ''}" placeholder="57">
                    </div>
                    <div class="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤:</label>
                        <input type="text" id="stats-challenges-desc" value="${currentData.solutionStats?.challengesDescription || ''}" placeholder="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤ —Ä–µ—à–∞–µ–º.">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:</label>
                        <input type="text" id="stats-directions" value="${currentData.solutionStats?.totalDirections || ''}" placeholder="6">
                    </div>
                    <div class="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:</label>
                        <input type="text" id="stats-directions-desc" value="${currentData.solutionStats?.directionsDescription || ''}" placeholder="–æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.">
                    </div>
                </div>
            </div>

            <!-- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é -->
            <div class="section-container">
                <h4>üì¢ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é</h4>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ CTA:</label>
                    <input type="text" id="cta-title" value="${currentData.callToAction?.title || ''}" placeholder="–ì–æ—Ç–æ–≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–µ—à–µ–Ω–∏—é –≤—ã–∑–æ–≤–æ–≤?">
                </div>
                <div class="form-group">
                    <label>–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</label>
                    <textarea id="cta-highlight" rows="3" placeholder="–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è...">${currentData.callToAction?.highlightText || ''}</textarea>
                </div>

                <h5>üîó –ö–Ω–æ–ø–∫–∏ CTA</h5>
                <div id="cta-buttons-container">
                    <!-- CTA –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->`;

        if (currentData.callToAction?.buttons) {
            currentData.callToAction.buttons.forEach((button, index) => {
                html += this.generateCTAButtonEditor(button, index);
            });
        }

        html += `
                </div>
                <button type="button" class="add-card-btn" onclick="ObzorEditor.addCTAButton()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É</button>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
            <div class="btn-group" style="margin-top: 40px;">
                <button class="btn btn-preview" onclick="ObzorEditor.preview()">üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button class="btn btn-save" onclick="ObzorEditor.save()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å obzor-data.js</button>
            </div>
        `;

        contentEdit.innerHTML = html;
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    safeGetElementValue: function(elementId) {
        try {
            const element = document.getElementById(elementId);
            return element ? element.value : '';
        } catch (error) {
            console.warn("ObzorEditor: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞", elementId, error);
            return '';
        }
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —ç—Ç–∞–ø–∞
    generateStageEditor: function(stage, index) {
        return `
            <div class="card-editor stage-editor" id="stage-${index}">
                <div class="card-header">
                    <h6>üìÖ ${stage.name} (${index + 1})</h6>
                    <button type="button" class="remove-card-btn" onclick="ObzorEditor.removeStage(${index})">‚ùå</button>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>ID —ç—Ç–∞–ø–∞:</label>
                        <input type="text" id="stage-${index}-id" value="${stage.id}" placeholder="current">
                    </div>
                    <div class="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                        <input type="text" id="stage-${index}-name" value="${stage.name}" placeholder="–¢–µ–∫—É—â–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–¶–≤–µ—Ç:</label>
                        <input type="color" id="stage-${index}-color" value="${stage.color || '#ffffff'}">
                    </div>
                    <div class="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                        <input type="text" id="stage-${index}-description" value="${stage.description}" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞">
                    </div>
                </div>
            </div>
        `;
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤—ã–∑–æ–≤–∞
    generateChallengeEditor: function(challenge, index) {
        let stagesHTML = '';
        if (currentData.challengesMatrix?.stages) {
            currentData.challengesMatrix.stages.forEach((stage, stageIndex) => {
                const isActive = challenge.stages && challenge.stages[stage.id];
                stagesHTML += `
                    <div class="checkbox-group">
                        <label>
                            <input type="checkbox" id="challenge-${index}-stage-${stage.id}" ${isActive ? 'checked' : ''}>
                            ${stage.name}
                        </label>
                    </div>
                `;
            });
        }

        return `
            <div class="card-editor challenge-editor" id="challenge-${index}">
                <div class="card-header">
                    <h6>üéØ ${challenge.title} (${index + 1})</h6>
                    <button type="button" class="remove-card-btn" onclick="ObzorEditor.removeChallenge(${index})">‚ùå</button>
                </div>
                <div class="form-group">
                    <label>ID –≤—ã–∑–æ–≤–∞:</label>
                    <input type="text" id="challenge-${index}-id" value="${challenge.id}" placeholder="drilling-complications">
                </div>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="challenge-${index}-title" value="${challenge.title}" placeholder="–û—Å–ª–æ–∂–Ω–µ–Ω–∏—è –ø—Ä–∏ –±—É—Ä–µ–Ω–∏–∏">
                </div>
                <div class="form-group">
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <textarea id="challenge-${index}-subtitle" rows="2" placeholder="–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞...">${challenge.subtitle}</textarea>
                </div>
                <div class="form-group">
                    <label>–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ç–∞–ø—ã:</label>
                    <div class="stages-checkboxes">
                        ${stagesHTML}
                    </div>
                </div>
            </div>
        `;
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞
    generateStrategicChallengeEditor: function(challenge, index) {
        const itemsHTML = challenge.items ? challenge.items.map((item, i) => `
            <div class="list-item-editor">
                <input type="text" id="strategic-${index}-item-${i}" value="${item}" placeholder="–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞">
                <button type="button" class="remove-item-btn" onclick="ObzorEditor.removeStrategicItem(${index}, ${i})">‚ùå</button>
            </div>
        `).join('') : '';

        return `
            <div class="card-editor strategic-editor" id="strategic-${index}">
                <div class="card-header">
                    <h6>‚ö° ${challenge.title} (${index + 1})</h6>
                    <button type="button" class="remove-card-btn" onclick="ObzorEditor.removeStrategicChallenge(${index})">‚ùå</button>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>ID —Ä–∞–∑–¥–µ–ª–∞:</label>
                        <input type="text" id="strategic-${index}-id" value="${challenge.id}" placeholder="kin45-section">
                    </div>
                    <div class="form-group">
                        <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                        <input type="text" id="strategic-${index}-title" value="${challenge.title}" placeholder="–ö–∏–Ω–µ—Ç–∏–∫–∞ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –ö–ò–ù 45">
                    </div>
                    <div class="form-group">
                        <label>–¶–≤–µ—Ç:</label>
                        <input type="color" id="strategic-${index}-color" value="${challenge.color || '#0e4094'}">
                    </div>
                </div>
                <div class="form-group">
                    <label>–≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞:</label>
                    <div id="strategic-${index}-items">${itemsHTML}</div>
                    <button type="button" class="add-item-btn" onclick="ObzorEditor.addStrategicItem(${index})">‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç</button>
                </div>
            </div>
        `;
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ CTA –∫–Ω–æ–ø–∫–∏
    generateCTAButtonEditor: function(button, index) {
        return `
            <div class="card-editor cta-button-editor" id="cta-button-${index}">
                <div class="card-header">
                    <h6>üîó ${button.text} (${index + 1})</h6>
                    <button type="button" class="remove-card-btn" onclick="ObzorEditor.removeCTAButton(${index})">‚ùå</button>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</label>
                        <input type="text" id="cta-button-${index}-text" value="${button.text}" placeholder="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É">
                    </div>
                    <div class="form-group">
                        <label>URL:</label>
                        <input type="text" id="cta-button-${index}-url" value="${button.url}" placeholder="tema.html">
                    </div>
                    <div class="form-group">
                        <label>–¢–∏–ø –∫–Ω–æ–ø–∫–∏:</label>
                        <select id="cta-button-${index}-type">
                            <option value="primary" ${button.type === 'primary' ? 'selected' : ''}>Primary</option>
                            <option value="secondary" ${button.type === 'secondary' ? 'selected' : ''}>Secondary</option>
                        </select>
                    </div>
                </div>
            </div>
        `;
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    addStage: function() {
        const container = document.getElementById('stages-container');
        const index = container.children.length;
        const stageHTML = this.generateStageEditor({
            id: `stage${index + 1}`,
            name: `–≠—Ç–∞–ø ${index + 1}`,
            color: '#ffffff',
            description: ''
        }, index);
        container.insertAdjacentHTML('beforeend', stageHTML);
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
    addChallenge: function() {
        const container = document.getElementById('challenges-container');
        const index = container.children.length;
        const challengeHTML = this.generateChallengeEditor({
            id: `challenge${index + 1}`,
            title: `–í—ã–∑–æ–≤ ${index + 1}`,
            subtitle: '',
            stages: {}
        }, index);
        container.insertAdjacentHTML('beforeend', challengeHTML);
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞
    addStrategicChallenge: function() {
        const container = document.getElementById('strategic-challenges-container');
        const index = container.children.length;
        const strategicHTML = this.generateStrategicChallengeEditor({
            id: `strategic${index + 1}`,
            title: `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${index + 1}`,
            color: '#0e4094',
            items: []
        }, index);
        container.insertAdjacentHTML('beforeend', strategicHTML);
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤
    addStrategicItem: function(strategicIndex) {
        const container = document.getElementById(`strategic-${strategicIndex}-items`);
        const itemIndex = container.children.length;
        const itemHTML = `
            <div class="list-item-editor">
                <input type="text" id="strategic-${strategicIndex}-item-${itemIndex}" value="" placeholder="–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç">
                <button type="button" class="remove-item-btn" onclick="ObzorEditor.removeStrategicItem(${strategicIndex}, ${itemIndex})">‚ùå</button>
            </div>
        `;
        container.insertAdjacentHTML('beforeend', itemHTML);
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CTA –∫–Ω–æ–ø–∫–∏
    addCTAButton: function() {
        const container = document.getElementById('cta-buttons-container');
        const index = container.children.length;
        const buttonHTML = this.generateCTAButtonEditor({
            text: `–ö–Ω–æ–ø–∫–∞ ${index + 1}`,
            url: '',
            type: 'primary'
        }, index);
        container.insertAdjacentHTML('beforeend', buttonHTML);
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
    removeStage: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
            document.getElementById(`stage-${index}`)?.remove();
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
    removeChallenge: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
            document.getElementById(`challenge-${index}`)?.remove();
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞
    removeStrategicChallenge: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
            document.getElementById(`strategic-${index}`)?.remove();
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞
    removeStrategicItem: function(strategicIndex, itemIndex) {
        const container = document.getElementById(`strategic-${strategicIndex}-items`);
        if (container && container.children[itemIndex]) {
            container.children[itemIndex].remove();
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ CTA –∫–Ω–æ–ø–∫–∏
    removeCTAButton: function(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
            document.getElementById(`cta-button-${index}`)?.remove();
        }
    },

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    collectStagesData: function() {
        const stages = [];
        const container = document.getElementById('stages-container');
        
        if (!container || container.children.length === 0) {
            console.log("ObzorEditor: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä stages-container –ø—É—Å—Ç");
            return stages;
        }

        try {
            Array.from(container.children).forEach((stageEl, index) => {
                if (!stageEl) return;
                
                stages.push({
                    id: this.safeGetElementValue(`stage-${index}-id`) || `stage${index + 1}`,
                    name: this.safeGetElementValue(`stage-${index}-name`) || `–≠—Ç–∞–ø ${index + 1}`,
                    color: this.safeGetElementValue(`stage-${index}-color`) || '#ffffff',
                    description: this.safeGetElementValue(`stage-${index}-description`) || ''
                });
            });
        } catch (error) {
            console.error("ObzorEditor: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤", error);
        }

        return stages;
    },

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    collectChallengesData: function() {
        const challenges = [];
        const container = document.getElementById('challenges-container');
        
        if (!container || container.children.length === 0) {
            console.log("ObzorEditor: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä challenges-container –ø—É—Å—Ç");
            return challenges;
        }

        try {
            Array.from(container.children).forEach((challengeEl, index) => {
                if (!challengeEl) {
                    console.warn("ObzorEditor: –ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç challengeEl –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞", index);
                    return;
                }

                const stages = {};
                const stagesContainer = challengeEl.querySelector('.stages-checkboxes');
                
                if (stagesContainer) {
                    const checkboxes = stagesContainer.querySelectorAll('input[type="checkbox"]');
                    checkboxes.forEach(checkbox => {
                        if (checkbox && checkbox.id && checkbox.id.includes('-stage-')) {
                            try {
                                const stageId = checkbox.id.split('-stage-')[1];
                                if (stageId) stages[stageId] = checkbox.checked;
                            } catch (splitError) {
                                console.warn("ObzorEditor: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —á–µ–∫–±–æ–∫—Å–∞:", checkbox.id, splitError);
                            }
                        } else {
                            console.warn("ObzorEditor: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫–±–æ–∫—Å —ç—Ç–∞–ø–∞:", checkbox);
                        }
                    });
                } else {
                    console.log("ObzorEditor: –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä .stages-checkboxes –¥–ª—è challenge", index);
                }

                const challengeData = {
                    id: this.safeGetElementValue(`challenge-${index}-id`) || `challenge${index + 1}`,
                    title: this.safeGetElementValue(`challenge-${index}-title`) || `–í—ã–∑–æ–≤ ${index + 1}`,
                    subtitle: this.safeGetElementValue(`challenge-${index}-subtitle`) || '',
                    stages: stages
                };

                challenges.push(challengeData);
            });
        } catch (error) {
            console.error("ObzorEditor: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤", error);
        }

        return challenges;
    },

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    collectStrategicChallengesData: function() {
        const strategicChallenges = [];
        const container = document.getElementById('strategic-challenges-container');
        
        if (!container || container.children.length === 0) {
            console.log("ObzorEditor: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä strategic-challenges-container –ø—É—Å—Ç");
            return strategicChallenges;
        }

        try {
            Array.from(container.children).forEach((strategicEl, index) => {
                if (!strategicEl) return;
                
                const items = [];
                const itemsContainer = strategicEl.querySelector(`#strategic-${index}-items`);
                
                if (itemsContainer) {
                    Array.from(itemsContainer.children).forEach((itemEl, itemIndex) => {
                        if (!itemEl) return;
                        
                        const input = itemEl.querySelector(`#strategic-${index}-item-${itemIndex}`);
                        if (input && input.value && input.value.trim()) {
                            items.push(input.value.trim());
                        }
                    });
                }

                strategicChallenges.push({
                    id: this.safeGetElementValue(`strategic-${index}-id`) || `strategic${index + 1}`,
                    title: this.safeGetElementValue(`strategic-${index}-title`) || `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${index + 1}`,
                    color: this.safeGetElementValue(`strategic-${index}-color`) || '#0e4094',
                    items: items
                });
            });
        } catch (error) {
            console.error("ObzorEditor: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤", error);
        }

        return strategicChallenges;
    },

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö CTA –∫–Ω–æ–ø–æ–∫
    collectCTAButtonsData: function() {
        const buttons = [];
        const container = document.getElementById('cta-buttons-container');
        
        if (!container || container.children.length === 0) {
            console.log("ObzorEditor: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä cta-buttons-container –ø—É—Å—Ç");
            return buttons;
        }

        try {
            Array.from(container.children).forEach((buttonEl, index) => {
                if (!buttonEl) return;
                
                buttons.push({
                    text: this.safeGetElementValue(`cta-button-${index}-text`) || `–ö–Ω–æ–ø–∫–∞ ${index + 1}`,
                    url: this.safeGetElementValue(`cta-button-${index}-url`) || '',
                    type: this.safeGetElementValue(`cta-button-${index}-type`) || 'primary'
                });
            });
        } catch (error) {
            console.error("ObzorEditor: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö CTA –∫–Ω–æ–ø–æ–∫", error);
        }

        return buttons;
    },

    // –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    collectData: function() {
        try {
            const data = {
                pageSettings: {
                    title: this.safeGetElementValue('obzor-page-title') || '–û–±–∑–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤',
                    heroTitle: this.safeGetElementValue('obzor-hero-title') || '–ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã',
                    mainSectionTitle: this.safeGetElementValue('obzor-main-title') || '–û–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π',
                    lastUpdated: new Date().toISOString()
                },
                companyIntro: {
                    sectionTitle: this.safeGetElementValue('company-section-title') || '–û –∫–æ–º–ø–∞–Ω–∏–∏',
                    sectionSubtitle: this.safeGetElementValue('company-section-subtitle') || '–í–µ–¥—É—â–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                    description: this.safeGetElementValue('company-description') || ''
                },
                challengesMatrix: {
                    sectionTitle: this.safeGetElementValue('challenges-matrix-title') || '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã',
                    sectionSubtitle: this.safeGetElementValue('challenges-matrix-subtitle') || '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                    stages: this.collectStagesData(),
                    challenges: this.collectChallengesData()
                },
                strategicChallenges: {
                    sectionTitle: this.safeGetElementValue('strategic-title') || '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã',
                    sectionSubtitle: this.safeGetElementValue('strategic-subtitle') || '–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è',
                    challenges: this.collectStrategicChallengesData()
                },
                solutionStats: {
                    sectionTitle: this.safeGetElementValue('stats-title') || '–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    totalChallenges: this.safeGetElementValue('stats-challenges') || '57',
                    challengesDescription: this.safeGetElementValue('stats-challenges-desc') || '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤ —Ä–µ—à–∞–µ–º.',
                    totalDirections: this.safeGetElementValue('stats-directions') || '6',
                    directionsDescription: this.safeGetElementValue('stats-directions-desc') || '–æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.'
                },
                callToAction: {
                    title: this.safeGetElementValue('cta-title') || '–ì–æ—Ç–æ–≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–µ—à–µ–Ω–∏—é –≤—ã–∑–æ–≤–æ–≤?',
                    highlightText: this.safeGetElementValue('cta-highlight') || '–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è.',
                    buttons: this.collectCTAButtonsData()
                }
            };

            console.log("ObzorEditor: –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", data);
            return data;
        } catch (error) {
            console.error("ObzorEditor: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö", error);
            return {
                pageSettings: {
                    title: '–û–±–∑–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤',
                    heroTitle: '–ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã',
                    mainSectionTitle: '–û–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π',
                    lastUpdated: new Date().toISOString()
                },
                companyIntro: {
                    sectionTitle: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
                    sectionSubtitle: '–í–µ–¥—É—â–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
                    description: ''
                },
                challengesMatrix: {
                    sectionTitle: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã',
                    sectionSubtitle: '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                    stages: [],
                    challenges: []
                },
                strategicChallenges: {
                    sectionTitle: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã',
                    sectionSubtitle: '–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è',
                    challenges: []
                },
                solutionStats: {
                    sectionTitle: '–ù–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    totalChallenges: '',
                    challengesDescription: '',
                    totalDirections: '',
                    directionsDescription: ''
                },
                callToAction: {
                    title: '',
                    highlightText: '',
                    buttons: []
                }
            };
        }
    },

    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
    preview: function() {
        const data = this.collectData();
        
        const previewHTML = `
            <h1>${data.pageSettings.heroTitle}</h1>
            <h2>${data.pageSettings.mainSectionTitle}</h2>
            <hr>
            <h3>${data.companyIntro.sectionTitle}</h3>
            <p><em>${data.companyIntro.sectionSubtitle}</em></p>
            <p>${data.companyIntro.description}</p>
            <hr>
            <h3>${data.challengesMatrix.sectionTitle}</h3>
            <p><em>${data.challengesMatrix.sectionSubtitle}</em></p>
            <p><strong>–≠—Ç–∞–ø–æ–≤:</strong> ${data.challengesMatrix.stages.length}</p>
            <p><strong>–í—ã–∑–æ–≤–æ–≤:</strong> ${data.challengesMatrix.challenges.length}</p>
            <hr>
            <h3>${data.strategicChallenges.sectionTitle}</h3>
            <p><em>${data.strategicChallenges.sectionSubtitle}</em></p>
            <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:</strong> ${data.strategicChallenges.challenges.length}</p>
            <hr>
            <p><strong>–§–∞–π–ª obzor-data.js –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!</strong></p>
        `;

        if (typeof openPreview === 'function') {
            openPreview(previewHTML);
        } else {
            alert('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
    save: function() {
        const updatedData = this.collectData();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º downloadJS –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö
        downloadJS('obzor-data.js', `window.obzorData = ${JSON.stringify(updatedData, null, 4)};`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        currentData = {...currentData, ...updatedData};
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
window.ObzorEditor = window.ObzorEditor;
console.log("‚úÖ ObzorEditor –∑–∞–≥—Ä—É–∂–µ–Ω");